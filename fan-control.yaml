esphome:
  name: fan-control
  friendly_name: Fan Control

esp8266:
  board: nodemcuv2

# pid climate log update is noisy, dial it back to warn
logger:
  level: DEBUG

# default HA integration, OTA updater and backup http web portal
api:
ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

# Example configuration entry
output:
  - platform: esp8266_pwm
    pin: D1
    frequency: 25000 Hz
    id: fan_1

text_sensor:
  # Send IP Address
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID

  # Send Uptime in raw seconds
  - platform: template
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start

sensor:
  # Send WiFi signal strength & uptime to HA
  - platform: wifi_signal
    name: WiFi Strength
    update_interval: 60s

  # RPM Signal from Fan
  # RPM Signal from Fan
  - platform: pulse_counter
    pin:
      number: D2
      mode:
        input: true
        pullup: true
    name: Measured Speed
    id: fan_pulse
    unit_of_measurement: 'RPM'
    accuracy_decimals: 1
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 10s

  # DHT Signal from Fan
  - platform: dht
    pin: D5
    temperature:
      name: "DHT Temperature"
      accuracy_decimals: 3
      id: fan_temperature
      # If you don't smooth the temperature readings
      # the PID controller over reacts to small changes.
      filters:
        - exponential_moving_average:
            alpha: 0.1
            send_every: 1
      on_value:
        - script.execute: control_script
    humidity:
      name: "DHT Humidity"
      accuracy_decimals: 3
      id: fan_humidity
    update_interval: 1.3s

  # This is a bit of overkill. It sends a human readable
  # uptime string
  # 1h 41m 32s instead of 6092 seconds
  - platform: uptime
    name: Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            # Custom C++ code to generate the result
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);                                                                                                                                                                                          
              seconds = seconds % (24 * 3600);                                                                                                                                                                                           
              int hours = seconds / 3600;                                                                                                                                                                                                
              seconds = seconds % 3600;                                                                                                                                                                                                  
              int minutes = seconds /  60;                                                                                                                                                                                               
              seconds = seconds % 60;                                                                                                                                                                                                    
              return (                                                                                                                                                                                                                   
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str(); 

# Example configuration entry
fan:
  - platform: speed
    output: fan_1
    id: the_fan
    name: "Dolap Fan 1"

# three number controlling the speed adjustment range
number:
  - platform: template
    name: "Fan Start Temp"
    id: start_temp
    internal: false
    max_value: 30.0
    initial_value: 22
    min_value: 20.0
    step: 1
    optimistic: true
    mode: slider

  - platform: template
    name: "Fan 100% Temp"
    id: max_temp
    internal: false
    max_value: 60.0
    initial_value: 35
    min_value: 30.0
    step: 1
    optimistic: true
    mode: slider

  - platform: template
    name: "Min. Fan Speed"
    id: min_speed
    internal: false
    max_value: 100.0
    initial_value: 15
    min_value: 0.0
    step: 1
    optimistic: true
    mode: slider

switch:
  # template switch, whether control is fully manual or temperature controlled
  - platform: template
    name: Temperature Controlled
    optimistic: true
    id: automatic
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - script.execute: control_script

  - platform: gpio
    name: "Role 1"
    id: role_1
    pin: D6
  - platform: gpio
    name: "Role 2"
    id: role_2
    pin: D7

script:
  - id: control_script
    then:
      - lambda: !lambda |-
          int val = map(id(fan_temperature).state, id(start_temp).state, id(max_temp).state, 1, 100);
          auto pct = constrain(val,0,100);
          if( id(automatic).state ) {
            if (pct>1) {
              if (pct<id(min_speed).state) {
                pct = id(min_speed).state;
              }
              auto call = id(the_fan).turn_on(); call.set_speed(pct); call.perform();
            } else {
              auto call = id(the_fan).turn_off(); call.set_speed(1); call.perform();
            }
          }

button:
  # Expose an ESP32 restart button to HA
  - platform: restart
    name: "Restart"